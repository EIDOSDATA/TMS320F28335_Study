var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');
var Startup = xdc.useModule('xdc.runtime.Startup');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');

var Load =  xdc.useModule('ti.sysbios.utils.Load');
var Boot = xdc.useModule('ti.catalog.c2800.init.Boot');


/*	
 * "If you want to use RTOS Analyzer, uncomment the below comments."
 
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.sysbiosHwiLogging = true;
LoggingSetup.loadLogging = true;
LoggingSetup.mainLoggerSize = 512;
LoggingSetup.sysbiosLoggerSize = 2048;

LoggingSetup.sysbiosTaskLogging = true;
LoggingSetup.loadTaskLogging = false;
LoggingSetup.loadHwiLogging = false;
BIOS.assertsEnabled = false;

BIOS.logsEnabled = false;
var UIABenchmark = xdc.useModule('ti.uia.events.UIABenchmark');
*/

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
  */
Text.isLoaded = false;
 

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
  */
SysMin.flushAtExit = false;
 

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 512;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_NonInstrumented;

/* System stack size (used by ISRs and Swis) */
Program.stack = 2048;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x100;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;
Defaults.common$.memoryPolicy = xdc.module("xdc.runtime.Types").STATIC_POLICY;
BIOS.cpuFreq.lo = 150000000;
Task.defaultStackSize = 1024;

System.extendedFormats = "%$L%$S%$F%f";
Task.idleTaskStackSize = 512;


/*Boot Module config*/
Boot.disableWatchdog = true;
Boot.bootFromFlash = false;
Boot.configurePll    = true;
Boot.pllOSCCLK       = 30;

Task.enableIdleTask = true;

/*DMA Hwi*/

/*Task Thread*/
var task0Params = new Task.Params();
task0Params.instance.name = "Task_Cli";
Program.global.Task_Cli = Task.create("&CliTask", task0Params);

var task1Params = new Task.Params();
task1Params.instance.name = "Task_Comm";
task1Params.priority = 1;
Program.global.Task_Comm = Task.create("&CommTask", task1Params);

var task2Params = new Task.Params();
task2Params.instance.name = "Task_Uart";
task2Params.priority = -1;
Program.global.Task_Uart = Task.create("&UartTask", task1Params);

/*Semaphore*/
/*For comm ringbuf*/
var semaphore0Params 			= new Semaphore.Params();
semaphore0Params.instance.name  = "SemSCADARxBuf";
semaphore0Params.mode 			= Semaphore.Mode_BINARY;
Program.global.SemSCADARxBuf 	= Semaphore.create(1, semaphore0Params);

var semaphore1Params 			= new Semaphore.Params();
semaphore1Params.instance.name  = "SemSCADATxBuf";
semaphore1Params.mode 			= Semaphore.Mode_BINARY;
Program.global.SemSCADATxBuf 	= Semaphore.create(1, semaphore1Params);

var semaphore2Params 			= new Semaphore.Params();
semaphore2Params.instance.name  = "SemLocalRxBuf";
semaphore2Params.mode 			= Semaphore.Mode_BINARY;
Program.global.SemLocalRxBuf 	= Semaphore.create(1, semaphore2Params);

var semaphore3Params 			= new Semaphore.Params();
semaphore3Params.instance.name  = "SemLocalTxBuf";
semaphore3Params.mode 			= Semaphore.Mode_BINARY;
Program.global.SemLocalTxBuf    = Semaphore.create(1, semaphore3Params);

var semaphore4Params0 			= new Semaphore.Params();
semaphore4Params0.instance.name = "SemUart";
semaphore4Params0.mode 			= Semaphore.Mode_BINARY;
Program.global.SemUart 		    = Semaphore.create(1, semaphore4Params0);

/*Startup Function Before entering main*/
Startup.resetFxn = "&Startup";

Load.taskEnabled = true;
Load.hwiEnabled = true;

BIOS.assertsEnabled = false;
BIOS.logsEnabled = false;
